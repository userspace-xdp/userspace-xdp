import json

# Define a function to generate the header file
def generate_header_file(json_input):
    # Parse the JSON input
    data = json.loads(json_input)
    
    # Extract the map details
    map_name = data.get('map_name')
    map_type = data.get('map_type')
    map_id = data.get('map_id')
    
    # Validate the map type
    if map_type not in ['array', 'hash']:
        raise ValueError("Invalid map type. Must be 'array' or 'hash'.")
    
    # Calculate the map ID with the provided format
    map_id_value = (map_id << 32)
    
    # Create the header file content
    header_content = f"""
// automatically generated by the bpftime aot tool
// do not edit
#ifndef BPF_MAP_IDS_H
#define BPF_MAP_IDS_H

#include "../common_map_helpers.h"

static const unsigned long long {map_name}_id = ((unsigned long long){map_id} << 32);

#endif // BPF_MAP_IDS_H
"""
    # Write the content to a header file
    header_filename = "bpf_map_ids.h"
    with open(header_filename, 'w') as header_file:
        header_file.write(header_content)
    
    print(f"Header file '{header_filename}' generated successfully.")

# Example JSON input
json_input = '''
{
    "map_name": "l3_filter",
    "map_type": "array",
    "map_id": 4
}
'''


# Define a function to generate the header file
def generate_inline_header_file(json_input, generate_inline_maps=False):
    # Parse the JSON input
    data = json.loads(json_input)
    
    # Extract the map details
    map_name = data.get('map_name')
    map_type = data.get('map_type')
    map_id = data.get('map_id')
    
    # Validate the map type
    if map_type not in ['array', 'hash']:
        raise ValueError("Invalid map type. Must be 'array' or 'hash'.")
    
    # Calculate the map ID with the provided format
    map_id_value = (map_id << 32)
    
    # Create the header file content
    header_content = f"""
// automatically generated by the bpftime aot tool
// do not edit
#ifndef BPF_MAP_IDS_H
#define BPF_MAP_IDS_H

#include "../common_map_helpers.h"
"""

    if generate_inline_maps:
        header_content += '#include "hash_map.h"\n'
    
    header_content += f"""
static const unsigned long long {map_name}_id = ((unsigned long long){map_id} << 32);
"""

    if generate_inline_maps:
        header_content += f"""

static __always_inline void* bpf_map_lookup_elem_aot(const unsigned long long* map, const void* key) {{
    if (*map == {map_name}_id)
        return elem_lookup(&__{map_name}, key);
    if (*map == {map_name}_id)
        return &__{map_name}_vrid_filter[*(const __u32*)key];
    return _bpf_helper_ext_0001(*map, key);
}}
static __always_inline int bpf_map_delete_elem_aot(const unsigned long long* map, const void* key) {{
    if (*map == {map_name}_id)
        return elem_delete(&__{map_name}, key);
    if (*map == {map_name}_id)
        return 0;
    return _bpf_helper_ext_0003(*map, key);
}}
static __always_inline int bpf_map_update_elem_aot(const unsigned long long* map, void* key, void* value, unsigned long long flags) {{
    if (*map == {map_name}_id)
        return elem_update(&__{map_name}, key, value);
    return _bpf_helper_ext_0002(*map, key, value, flags);
}}
"""
    header_content += "#endif // BPF_MAP_IDS_H\n"

    # Write the content to a header file
    header_filename = "bpf_map_ids.h"
    with open(header_filename, 'w') as header_file:
        header_file.write(header_content)
    
    print(f"Header file '{header_filename}' generated successfully.")

# Call the function to generate the header file
generate_header_file(json_input)
